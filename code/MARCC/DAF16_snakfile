# vim: set ft=python:

shell.prefix("""
set -o pipefail
set -e
""")

"""
Author: Margaret R. Starostik
Created: 2021-03-02
Aim: mRNA-seq snakemake workflow for DAF-16 project


Listed below are some useful commands.
To use these commands, run an interactive session on MARCC with Python loaded.


I used the following custom Python environment:
module load anaconda
conda activate /home-net/home-3/mstaros1@jhu.edu/conda/python37


(1) Perform dry run to test snakemake workflow. This is useful to debug errors.

snakemake --snakefile DAF16_snakefile --dryrun --printshellcmds --rerun-incomplete


(2) Remove a lock on the working directory. This must be done before executing
the workflow if the snakemake run fails without unlocking the directory (e.g.
if the process is killed during the run)

snakemake --snakefile DAF16_snakefile --unlock


(3) Track changes to code.

snakemake --snakefile DAF16_snakefile --list-code-changes


This snakemake workflow is executed on MARCC using the accompanying bash file:

sbatch run_DAF16_snakefile.sh
"""

################################################################################
################################################################################
## DEPENDENCIES
################################################################################
################################################################################

import glob
from os.path import join, basename, dirname
from snakemake.utils import R


BOWTIE_VERSION = "1.1.1"
FASTQC_VERSION = "0.11.7"
JAVA_VERSION = "1.8.0_181"
RSEM_VERSION = "2.1.2-1.3.2"
STAR_VERSION = "2.4.2a"


################################################################################
################################################################################
## PIPELINE CONFIGURATION
################################################################################
################################################################################

# configuation file
#configfile: "/home-3/mstaros1@jhu.edu/work-mschatz1/mstarostik/aalessi2-133698/config-DAF16.yaml"

genomeFASTA = "/home-3/mstaros1@jhu.edu/work-zfs/mstarostik/REFERENCES/Celegans/WBcel235_Ensembl97.269/ORIGINAL/Caenorhabditis_elegans.WBcel235.dna.toplevel.fa"
genomeGTF = "/home-3/mstaros1@jhu.edu/work-zfs/mstarostik/REFERENCES/Celegans/WBcel235_Ensembl97.269/ORIGINAL/Caenorhabditis_elegans.WBcel235.97.gtf"


# directories
WORK_DIR = "/home-3/mstaros1@jhu.edu/work-mschatz1/mstarostik"
PROJECT = "aalessi2-133698/"
PROJECT_DIR = "{0}/{1}".format(WORK_DIR, PROJECT)

FASTQ_DIR = PROJECT_DIR + "RawData/"
FILTER_DIR = PROJECT_DIR + "ProcessedData/01-Filtered/"
ALIGN_DIR = PROJECT_DIR + "ProcessedData/02-Aligned/"
QUANT_DIR = PROJECT_DIR + "ProcessedData/03-Quantified/"

FASTQC01_DIR = PROJECT_DIR + "QualityControl/FastQC/Raw/"
FASTQC02_DIR = PROJECT_DIR + "QualityControl/FastQC/PostTrim/"

# trimmomatic
ADAPTERS = "/home-3/mstaros1@jhu.edu/tools/trimmomatic-0.39/adapters/TruSeq3-PE-2.fa"
TRIMMOMATIC = "/home-3/mstaros1@jhu.edu/tools/trimmomatic-0.39/trimmomatic-0.39.jar"

################################################################################
################################################################################
## GLOBALS: DECLARE VARIABLES USED IN SUBSEQUENT STEPS
################################################################################
################################################################################

REFERENCE = "/home-3/mstaros1@jhu.edu/work-zfs/mstarostik/REFERENCES/Celegans/WBcel235_Ensembl97.269/"
STAR_IDX = REFERENCE + "STAR99/"
RSEM_IDX = REFERENCE + "RSEM/"

################################################################################
################################################################################
## SAMPLES TO PROCESS
################################################################################
################################################################################

# sample list
SAMPLES =["HFLJVBCXY_2_ACTGAT", "HFLJVBCXY_2_ATTCCT","HFLJVBCXY_2_CGTACG", "HFLJVBCXY_2_GAGTGG", "HFLJVBCXY_2_GTGGCC", "HFLJVBCXY_2_GTTTCG"]

################################################################################
################################################################################
## DESIRED OUTPUTS
################################################################################
################################################################################

# trimmomatic
TREAD1 = expand(FILTER_DIR + "trimmed_{sample}_1.fastq.gz", sample = SAMPLES)
TREAD2 = expand(FILTER_DIR + "trimmed_{sample}_2.fastq.gz", sample = SAMPLES)
UNPAIRED1 = expand(FILTER_DIR + "unpaired_{sample}_1.fastq.gz", sample = SAMPLES)
UNPAIRED2 = expand(FILTER_DIR + "unpaired_{sample}_2.fastq.gz", sample = SAMPLES)

# STAR
GENOMEPARAMETERS = STAR_IDX + "genomeParameters.txt"

GBAM = expand(ALIGN_DIR + "{sample}_Aligned.sortedByCoord.out.bam", sample = SAMPLES)
TBAM = expand(ALIGN_DIR + "{sample}_Aligned.toTranscriptome.out.bam", sample = SAMPLES)
LOG = expand(ALIGN_DIR + "{sample}_Log.out", sample = SAMPLES)
FINAL = expand(ALIGN_DIR + "{sample}_Log.final.out", sample = SAMPLES)

# RSEM
RIDX = RSEM_IDX + "WBcel235.idx.fa"
QUANT_GENES = expand(QUANT_DIR + "{sample}.genes.results", sample = SAMPLES)
GENE_MATRIX = QUANT_DIR + "aalessi2-133698-ExpectedCounts.matrix"

# FastQC
READ1_QC = expand(FASTQC01_DIR + "{sample}_1_fastqc.zip", sample = SAMPLES)
READ2_QC = expand(FASTQC01_DIR + "{sample}_2_fastqc.zip", sample = SAMPLES)
TREAD1_QC = expand(FASTQC02_DIR + "trimmed_{sample}_1_fastqc.zip", sample = SAMPLES)
TREAD2_QC = expand(FASTQC02_DIR + "trimmed_{sample}_2_fastqc.zip", sample = SAMPLES)

################################################################################
################################################################################
## LOCAL RULES: RULES THAT CAN BE RUN LOCALLY
################################################################################
################################################################################

localrules: all

"""
RULE ALL: snakemake accepts rule names as targets if the referred rule does not
have wildcards. If no target is given at command line at the top of the
workflow, snakemake will define the first file of the snakefile as the target.
Therefore, it is best practice to have a "RULE ALL" at the top of the WORKFLOW
which has all the desired target files of the pipeline as input files. Target
file variables can be obtained from "SAMPLES TO BE PROCESSED" above.
"""

rule all:
    input:
        READ1_QC,
        READ2_QC,
        TREAD1,
        TREAD2,
        UNPAIRED1,
        UNPAIRED2,
        TREAD1_QC,
        TREAD2_QC,

        GENOMEPARAMETERS,
        GBAM,
        TBAM,
        LOG,
        FINAL,
#
        RIDX,
        QUANT_GENES,
        GENE_MATRIX

################################################################################
################################################################################
## RULES
################################################################################
################################################################################

################################################################################
# run FastQC
################################################################################

rule fastqc01:
    """
    Run FastQC on raw FASTQ files.
    """
    input:
        read1 = FASTQ_DIR + "{sample}_1.fastq.gz",
        read2 = FASTQ_DIR + "{sample}_2.fastq.gz"
    output:
        read1_qc = FASTQC01_DIR + "{sample}_1_fastqc.zip",
        read2_qc = FASTQC01_DIR + "{sample}_2_fastqc.zip"
    threads: 4
    params:
        mem = "2G",
        time = "30:00",
        partition ="express",
        outdir = FASTQC01_DIR
    shell:
        """
        module load fastqc/{FASTQC_VERSION} || exit 1
        fastqc \
        -o {params.outdir} \
        {input.read1} {input.read2}
        """

################################################################################
# filter reads
################################################################################

rule trim:
    """
    Clipping of Illumina adapters followed by quality trimming and length
    filtering.
    """
    input:
        read1 = FASTQ_DIR + "{sample}_1.fastq.gz",
        read2 = FASTQ_DIR + "{sample}_2.fastq.gz"
    output:
        tread1 = FILTER_DIR + "trimmed_{sample}_1.fastq.gz",
        tread2 = FILTER_DIR + "trimmed_{sample}_2.fastq.gz",
        unpaired1 = FILTER_DIR + "unpaired_{sample}_1.fastq.gz",
        unpaired2 = FILTER_DIR + "unpaired_{sample}_2.fastq.gz"
    threads: 8
    params:
        mem = "20G",
        time = "2:00:00",
        partition = "shared"
    shell:
        """
        module load java/{JAVA_VERSION} || exit 1
        java -jar {TRIMMOMATIC} PE \
        -threads {threads} \
        {input.read1} {input.read2} \
        {output.tread1} {output.unpaired1} \
        {output.tread2} {output.unpaired2} \
        ILLUMINACLIP:{ADAPTERS}:2:30:10 \
        LEADING:5 \
        TRAILING:5 \
        SLIDINGWINDOW:4:15 \
        MINLEN:36
        """

################################################################################
# run FastQC
################################################################################

rule fastqc02:
    """
    Run FastQC on trimmed FASTQ files (i.e. files processed by Trimmomatic).
    """
    input:
        tread1 = FILTER_DIR + "trimmed_{sample}_1.fastq.gz",
        tread2 = FILTER_DIR + "trimmed_{sample}_2.fastq.gz"
    output:
        tread1_qc = FASTQC02_DIR + "trimmed_{sample}_1_fastqc.zip",
        tread2_qc = FASTQC02_DIR + "trimmed_{sample}_2_fastqc.zip"
    threads: 4
    params:
        mem = "2G",
        time = "30:00",
        partition ="express",
        outdir = FASTQC02_DIR
    shell:
        """
        module load fastqc/{FASTQC_VERSION} || exit 1
        fastqc \
        -o {params.outdir} \
        {input.tread1} {input.tread2}
        """

################################################################################
# align reads to the reference genome using STAR
################################################################################

rule star_index:
    """
    Generate STAR genome index.
    """
    input:
        genome = genomeFASTA,
        gtf = genomeGTF
    output:
        genomeparameters = STAR_IDX + "genomeParameters.txt"
    threads: 4
    params:
        mem = "20G",
        time = "1:00:00",
        partition = "gpuk80"
    shell:
        """
        module load star/{STAR_VERSION} || exit 1
        STAR \
        --runThreadN {threads} \
        --runMode genomeGenerate \
        --genomeDir $(dirname {output.genomeparameters}) \
        --genomeFastaFiles {input.genome} \
        --sjdbGTFfile {input.gtf} \
        --sjdbOverhang 99 \
        """

##------------------------------------------------------------------------------

rule map:
    """
    Map trimmed reads to reference genome using STAR. Parameter limitBAMsortRAM had to be adjusted due to not enough memory for mRNA2018-017-SNPC13_TBSx2-72h-WW.
    """
    input:
        tread1 = FILTER_DIR + "trimmed_{sample}_1.fastq.gz",
        tread2 = FILTER_DIR + "trimmed_{sample}_2.fastq.gz",
        genomeparameters = STAR_IDX + "genomeParameters.txt"
    output:
        gbam = ALIGN_DIR + "{sample}_Aligned.sortedByCoord.out.bam",
        tbam = ALIGN_DIR + "{sample}_Aligned.toTranscriptome.out.bam",
        log = ALIGN_DIR + "{sample}_Log.out",
        final = ALIGN_DIR + "{sample}_Log.final.out",
    threads: 4
    params:
        mem = "20G",
        time = "12:00:00",
        partition = "gpuk80"
    shell:
        """
        cd $(dirname {output.gbam})
        module load star/{STAR_VERSION} || exit 1
        STAR \
        --runThreadN {threads} \
        --genomeDir $(dirname {input.genomeparameters})  \
        --readFilesIn {input.tread1} {input.tread2} \
        --readFilesCommand zcat \
        --outSAMtype BAM SortedByCoordinate \
        --twopassMode Basic \
        --quantMode TranscriptomeSAM \
        --outFileNamePrefix /home-3/mstaros1@jhu.edu/work-mschatz1/mstarostik/aalessi2-133698/ProcessedData/02-Aligned/{wildcards.sample}_
  	"""

###############################################################################
## count reads across genomic features using RSEM
###############################################################################

rule rsem_index:
    """
    Generate STAR genome index. This is in order to align reads to the
    reference genome.
    """
    input:
        genome = genomeFASTA,
        gtf = genomeGTF
    output:
        ridx = RSEM_IDX + "/WBcel235.idx.fa"
    threads: 4
    params:
        mem = "15G",
        time = "30:00",
        partition = "gpuk80"
    shell:
        """
        $(dirname {output.ridx})
        module load rsem-macs2/{RSEM_VERSION} || exit 1
        rsem-prepare-reference \
        --num-threads {threads} \
        --gtf {input.gtf} \
        {input.genome} \
        WBcel235
        --
          """

##------------------------------------------------------------------------------

rule counts:
    """
    Count mapped reads to genomic features using RSEM.The parameter for strandedness was set to reverse since the Illumina TruSeq stranded mRNA-seq library prep kit was used.
    """
    input:
        transcriptome_bam = ALIGN_DIR + "{sample}_Aligned.toTranscriptome.out.bam",
        ridx = RSEM_IDX + "WBcel235.idx.fa"
    output:
        quant_genes = QUANT_DIR + "{sample}.genes.results"
    threads: 4
    params:
        mem = "20G",
        time = "08:00:00",
        partition = "gpuk80"
    shell:
        """
        cd $(dirname {output.quant_genes})
        rsem_dir=$(dirname {input.ridx})
        rsem_dir+="/WBcel235"
        module load rsem-macs2/{RSEM_VERSION} || exit 1
        rsem-calculate-expression \
        --num-threads {threads} \
        --strandedness reverse \
        --alignments \
        --paired-end \
        {input.transcriptome_bam} \
        $rsem_dir \
        {wildcards.sample}
        """

##------------------------------------------------------------------------------

rule gene_matrix:
    """
    Generate matrix whereby each element in the matrix represents the expected count for a particular gene in a particular sample.
    """
    input:
        quant_genes = expand(QUANT_DIR + "{sample}.genes.results", sample = SAMPLES)
    output:
        gene_matrix = QUANT_DIR + "aalessi2-133698-ExpectedCounts.matrix"
    threads: 4
    params:
        mem = "3G",
        time = "02:00:00",
        partition = "express"
    shell:
        """
        cd $(dirname {output.gene_matrix})
        module load rsem-macs2/{RSEM_VERSION} || exit 1
        rsem-generate-data-matrix {input.quant_genes} > {output.gene_matrix}
        """